# Copyright 2020 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/. */

import("//brave/build/cargo.gni")
import("//brave/build/rust/config.gni")
import("//brave/test/testing.gni")

config("external_config") {
  include_dirs = [ "src" ]
}

# Cargo build for the Rust project
cargo_build("speedreader_rust_lib") {
  inputs = [
    # Underlying library code
    "../lib/build.rs",
    "../lib/Cargo.lock",
    "../lib/Cargo.toml",
    "../lib/src/classifier/feature_extractor.rs",
    "../lib/src/classifier/mod.rs",
    "../lib/src/classifier/model.c",
    "../lib/src/classifier/model.rs",
    "../lib/src/classifier/model.rs",
    "../lib/src/lib.rs",
    "../lib/src/readability/Cargo.toml",
    "../lib/src/readability/src/dom.rs",
    "../lib/src/readability/src/error.rs",
    "../lib/src/readability/src/extractor.rs",
    "../lib/src/readability/src/lib.rs",
    "../lib/src/readability/src/scorer.rs",
    "../lib/src/rewriter_config_builder.rs",
    "../lib/src/speedreader_heuristics.rs",
    "../lib/src/speedreader_streaming.rs",
    "../lib/src/speedreader.rs",
    "../lib/src/whitelist.rs",
    # FFI
    "Cargo.lock",
    "Cargo.toml",
    "charbuf.rs",
    "lib.rs",
    "speedreader.rs",
  ]

  if (rust_shared_lib && !is_component_build) {
    lib_install_name = "@loader_path/../../Libraries/libspeedreader_ffi${cargo_lib_suffix}"
    rust_flags += " -C link-args=-Wl,-install_name,$lib_install_name "
  }
  output = "${root_gen_dir}/speedreader/out/${cargo_lib_prefix}speedreader_ffi${cargo_lib_suffix}"
  manifest_path = "Cargo.toml"
  build_path = "${root_gen_dir}/speedreader/out"
}

# Generate FFI header from Rust source
cargo_cbindgen("speedreader_ffi_header") {
  config = "cbindgen.toml"
  output = "${target_gen_dir}/speedreader_ffi.h"

  sources = [
    "Cargo.lock",
    "Cargo.toml",
    "cbindgen.toml",
    "charbuf.rs",
    "lib.rs",
    "speedreader.rs",
  ]
}

# Build the FFI wrapper as a static library
source_set("speedreader_ffi") {
  public_configs = [ ":external_config" ]

  sources = [
    "speedreader.cc",
    "speedreader.h"
  ]

  deps = [
    "//base",
    ":speedreader_rust_lib",
    ":speedreader_ffi_header",
  ]

  libs = get_target_outputs(":speedreader_rust_lib")
}

if (is_mac) {
  bundle_data("speedreader_ffi_lib") {
    sources = get_target_outputs(":speedreader_rust_lib")
    outputs = [
      "{{bundle_contents_dir}}/Libraries/{{source_file_part}}",
    ]
    public_deps = [
      ":speedreader_rust_lib",
    ]
  }
} else {
  group("speedreader_ffi_lib") {}
}

if (rust_shared_lib && !is_component_build) {
  fix_testing_install_name("test_install_name_speedreader") {
    current_path = "@loader_path/../../Libraries/libspeedreader_ffi${cargo_lib_suffix}"
    lib_paths = get_target_outputs(":speedreader_rust_lib")
    new_path = "@executable_path/" + rebase_path(lib_paths[0], root_build_dir)
  }
} else {
  group("test_install_name_speedreader") {}
}
